facet_wrap(~color) +
scale_fill_brewer(type="qual") +
scale_y_continuous(limits=c(0, 600))
source('~/.active-rstudio-document', echo=TRUE)
ggplot(aes(x=price, y=table), data=diamonds) +
geom_point(aes(fill=cut))
ggplot(aes(x=price, y=table), data=diamonds) +
geom_point(aes(color=cut))
source('~/.active-rstudio-document', echo=TRUE)
ggplot(aes(x=price, y=table), data=diamonds) +
geom_point(aes(color=cut)) +
scale_color_brewer(type="qual")
ggplot(aes(x=table, y=price), data=diamonds) +
geom_point(aes(color=cut)) +
scale_color_brewer(type="qual")
ggplot(aes(x=table, y=price), data=diamonds) +
geom_point(aes(color=cut)) +
scale_color_brewer(type="qual") +
scale_x_continuous(limits=c(50, 80))
ggplot(aes(x=table, y=price), data=diamonds) +
geom_point(aes(color=cut)) +
scale_color_brewer(type="qual") +
scale_x_continuous(limits=c(50, 80), breaks=seq(50, 80, 2))
ggplot(aes(x=volume, y=price), data=subset(diamonds, volumn <= quantile(volume, .99))) +
geom_point(aes(color=clarity)) +
scale_y_log10()
ggplot(aes(x=volume, y=price), data=subset(diamonds, volume <= quantile(volume, .99))) +
geom_point(aes(color=clarity)) +
scale_y_log10()
View(diamonds)
```
library(dplyr)
diamonds <- transform(diamonds, volume=x*y*z)
ggplot(aes(x=volume, y=price), data=subset(diamonds, volume <= quantile(volume, .99))) +
geom_point(aes(color=clarity)) +
scale_y_log10()
ggplot(aes(x=volume, y=price), data=subset(diamonds, volume <= quantile(volume, .99))) +
geom_point(aes(color=clarity)) +
scale_y_log10() +
scale_color_brewer(type="qual")
ggplot(aes(x=volume, y=price), data=subset(diamonds, volume <= quantile(volume, .99))) +
geom_point(aes(color=clarity)) +
scale_y_log10() +
scale_color_brewer(type="div")
names(pf)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(aes(x=tenure, y=friendships_initiated/tenure), data=pf) +
geom_line(stat="summary", fun.y=median)
ggplot(aes(x=tenure, y=friendships_initiated/tenure), data=pf) +
geom_line(stat="summary", fun.y=median, aes(color=year_joined.bucket))
ggplot(aes(x=tenure, y=friendships_initiated/tenure), data=pf) +
geom_line(stat="summary", fun.y=median, aes(color=year_joined.bucket)) +
scale_y_continuous(limits=c(0, 0.8))
ggplot(aes(x=tenure, y=friendships_initiated/tenure), data=pf) +
geom_line(stat="summary", fun.y=mean, aes(color=year_joined.bucket)) +
scale_y_continuous(limits=c(0, 0.8))
ggplot(aes(x=tenure, y=friendships_initiated/tenure), data=subset(pf, tenure>0)) +
geom_line(stat="summary", fun.y=mean, aes(color=year_joined.bucket)) +
scale_y_continuous(limits=c(0, 0.8))
ggplot(aes(x=tenure, y=friendships_initiated/tenure), data=subset(pf, tenure>0)) +
geom_line(stat="summary", fun.y=median, aes(color=year_joined.bucket)) +
scale_y_continuous(limits=c(0, 0.8))
View(pf)
ggplot(aes(x=tenure, y=friendships_initiated/tenure), data=subset(pf, friendships_initiated/tenure>0)) +
geom_line(stat="summary", fun.y=median, aes(color=year_joined.bucket)) +
scale_y_continuous(limits=c(0, 0.8))
View(pf.fc_by_age_months)
View(pf.fc_by_age_gender.wide)
View(pf.fc_by_age_gender)
ggplot(aes(x=tenure, y=friendships_initiated/tenure), data=subset(pf, !is.na(year_joined.bucket))) +
geom_line(stat="summary", fun.y=median, aes(color=year_joined.bucket)) +
scale_y_continuous(limits=c(0, 0.8))
ggplot(aes(x=tenure, y=friendships_initiated/friend_counts), data=subset(pf, !is.na(year_joined.bucket))) +
geom_line(stat="summary", fun.y=median, aes(color=year_joined.bucket)) +
scale_y_continuous(limits=c(0, 0.8))
ggplot(aes(x=tenure, y=friendships_initiated/friend_count), data=subset(pf, !is.na(year_joined.bucket))) +
geom_line(stat="summary", fun.y=median, aes(color=year_joined.bucket)) +
scale_y_continuous(limits=c(0, 0.8))
ggplot(aes(x=tenure, y=friendships_initiated/friend_count), data=subset(pf, !is.na(year_joined.bucket))) +
geom_line(stat="summary", fun.y=median, aes(color=year_joined.bucket)) +
scale_y_continuous(limits=c(0, 0.8), breaks=seq(0, .8, .25))
ggplot(aes(x=tenure, y=friendships_initiated/friend_count), data=subset(pf, friendships_initiated>0))) +
geom_line(stat="summary", fun.y=median, aes(color=year_joined.bucket)) +
scale_y_continuous(limits=c(0, 0.8), breaks=seq(0, .8, .25))
ggplot(aes(x=tenure, y=friendships_initiated/friend_count), data=subset(pf, friendships_initiated/friend_count>0))) +
geom_line(stat="summary", fun.y=median, aes(color=year_joined.bucket)) +
scale_y_continuous(limits=c(0, 0.8), breaks=seq(0, .8, .25))
ggplot(aes(x=tenure, y=friendships_initiated/friend_count), data=subset(pf, friendships_initiated/friend_count>0))) +
geom_line(stat="summary", fun.y=median, aes(color=year_joined.bucket)) +
scale_y_continuous(limits=c(0, 0.8), breaks=seq(0, .8, .25))
ggplot(aes(x=tenure, y=friendships_initiated/friend_count), data=subset(pf, friendships_initiated/friend_count>0))) +
geom_line(stat="summary", fun.y=median, aes(color=year_joined.bucket)) +
scale_y_continuous(limits=c(0, 0.8), breaks=seq(0, .8, .25))
ggplot(aes(x=tenure, y=friendships_initiated/friend_count), data=subset(pf, friendships_initiated/friend_count>0)) +
geom_line(stat="summary", fun.y=median, aes(color=year_joined.bucket)) +
scale_y_continuous(limits=c(0, 0.8), breaks=seq(0, .8, .25))
ggplot(aes(x=tenure, y=friendships_initiated/friend_count), data=subset(pf, friendships_initiated/friend_count>0)) +
geom_line(stat="summary", fun.y=median, aes(color=year_joined.bucket)) +
scale_y_continuous(limits=c(0, 0.8), breaks=seq(0, .8, .25)) +
geom_smooth()
?floor
floor(2.5)
round(2.5)
round(2.6)
round(2.3)
ggplot(aes(x=7 * round(tenure/7), y=friendships_initiated/friend_count), data=subset(pf, friendships_initiated/friend_count>0)) +
geom_line(stat="summary", fun.y=median, aes(color=year_joined.bucket)) +
scale_y_continuous(limits=c(0, 0.8), breaks=seq(0, .8, .25))
ggplot(aes(x=30 * round(tenure/30), y=friendships_initiated/friend_count), data=subset(pf, friendships_initiated/friend_count>0)) +
geom_line(stat="summary", fun.y=median, aes(color=year_joined.bucket)) +
scale_y_continuous(limits=c(0, 0.8), breaks=seq(0, .8, .25))
pf$year_joined.bucket
pf %>%
filter(year_joined.bucket=c("(2012,2014]")) %>%
mean(friendships_initiated/friend_count)
pf %>%
filter(year_joined.bucket==c("(2012,2014]")) %>%
mean(friendships_initiated/friend_count)
pf %>%
filter(year_joined.bucket==c("(2012,2014]")) %>%
mean(friendships_initiated/friend_count, rm.na=T)
pf %>%
group_by(year_joined.bucket) %>%
summarise(mean=mean(friendships_initiated/friend_count))
pf %>%
group_by(year_joined.bucket) %>%
summarise(mean=mean(friendships_initiated/friend_count,na.rm = T))
ggplot(aes(x=cut, y=price/carat), data=diamonds) +
geom_point(aes(color=clarity))
ggplot(aes(x=cut, y=price/carat), data=diamonds) +
geom_point(aes(color=clarity)) +
scale_color_brewer(type="div")
ggplot(aes(x=cut, y=price/carat), data=diamonds) +
geom_point(aes(color=clarity)) +
scale_color_brewer(type="div") +
facet_wrap(~clarity)
ggplot(aes(x=cut, y=price/carat), data=diamonds) +
geom_point(aes(color=clarity)) +
scale_color_brewer(type="div") +
facet_wrap(~color)
ggplot(aes(x=cut, y=price/carat), data=diamonds) +
geom_point(aes(color=clarity), position="jitter") +
scale_color_brewer(type="div") +
facet_wrap(~color)
ggplot(aes(x=cut, y=price/carat), data=diamonds) +
geom_point(aes(color=color), position="jitter") +
scale_color_brewer(type="div") +
facet_wrap(~clarity)
ggplot(aes(x=carat, y=price), data=subset(diamonds, carat<quantile(diamonds$carat, .99), price<quantile(diamonds$price, .99))) +
geom_point(alpha=.05)
data("diamonds")
library(ggplot2)
ggplot(aes(x=cara, y=price), data=diamonds) +
geom_point(alpha=.5, color="black", fill="orange") +
scale_x_continuous(limits=c(0, quantile(diamonds$carat, .99)))
data("diamonds")
library(ggplot2)
ggplot(aes(x=carat, y=price), data=diamonds) +
geom_point(alpha=.5, color="black", fill="orange") +
scale_x_continuous(limits=c(0, quantile(diamonds$carat, .99)))
data("diamonds")
library(ggplot2)
ggplot(aes(x=carat, y=price), data=diamonds) +
geom_point(alpha=.5, color="black", fill="orange") +
scale_x_continuous(limits=c(0, quantile(diamonds$carat, .99))) +
geom_smooth(method="lm")
# sample 10,000 diamonds from the data set
set.seed(20022012)
# install these if necessary
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
library(memisc)
# install these if necessary
# install.packages('GGally')
# install.packages('scales')
# install.packages('memisc')
# install.packages('lattice')
# install.packages('MASS')
# install.packages('car')
# install.packages('reshape')
# install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
# install these if necessary
# install.packages('GGally')
# install.packages('scales')
# install.packages('memisc')
# install.packages('lattice')
# install.packages('MASS')
# install.packages('car')
# install.packages('reshape')
# install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
help("wrap", package = "GGally")
# install these if necessary
# install.packages('GGally')
# install.packages('scales')
# install.packages('memisc')
# install.packages('lattice')
# install.packages('MASS')
# install.packages('car')
# install.packages('reshape')
# install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
library(gridExtra)
plot1 <- qplot(x=price, data=diamonds) +
ggtitle('Price')
plot2 <- qplot(x=log(price), data=diamonds) +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=1)
library(gridExtra)
plot1 <- qplot(x=price, data=diamonds, binwidth=0.01) +
ggtitle('Price')
plot2 <- qplot(x=log(price), data=diamonds, binwidth=0.01) +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=1)
library(gridExtra)
plot1 <- qplot(x=price, data=diamonds, binwidth=0.1) +
ggtitle('Price')
plot2 <- qplot(x=log(price), data=diamonds, binwidth=0.1) +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=1)
library(gridExtra)
plot1 <- qplot(x=price, data=diamonds, binwidth=1) +
ggtitle('Price')
plot2 <- qplot(x=log(price), data=diamonds, binwidth=1) +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=1)
grid.arrange(plot1, plot2, ncol=1)
# install these if necessary
# install.packages('GGally')
# install.packages('scales')
# install.packages('memisc')
# install.packages('lattice')
# install.packages('MASS')
# install.packages('car')
# install.packages('reshape')
# install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
library(gridExtra)
plot1 <- qplot(x=price, data=diamonds) +
ggtitle('Price')
plot2 <- qplot(x=log(price), data=diamonds) +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=1)
library(gridExtra)
plot1 <- qplot(x=price, data=diamonds, binwidth=1) +
ggtitle('Price')
plot2 <- qplot(x=log(price), data=diamonds, binwidth=1) +
ggtitle('Price (log10)')
# grid.arrange(plot1, plot2, ncol=1)
library(gridExtra)
plot1 <- qplot(x=price, data=diamonds, binwidth=1) +
ggtitle('Price')
plot2 <- qplot(x=log(price), data=diamonds, binwidth=1) +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=1)
library(gridExtra)
plot1 <- qplot(x=price, data=diamonds, binwidth=1) +
ggtitle('Price')
plot2 <- qplot(x=price, data=diamonds, binwidth=1) +
scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=1)
library(gridExtra)
plot1 <- qplot(x=price, data=diamonds, binwidth=1) +
ggtitle('Price')
plot2 <- qplot(x=price, data=diamonds) +
scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=1)
library(gridExtra)
plot1 <- qplot(x=price, data=diamonds, binwidth=1) +
ggtitle('Price')
plot2 <- qplot(x=price, data=diamonds, binwidth=1) +
scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=1)
qplot(x=price, data=diamonds, binwidth=1) +
scale_x_log10() +
ggtitle('Price (log10)')
qplot(x=price, data=diamonds, binwidth=.1) +
scale_x_log10() +
ggtitle('Price (log10)')
qplot(x=price, data=diamonds, binwidth=.01) +
scale_x_log10() +
ggtitle('Price (log10)')
plot2 <- qplot(x=price, data=diamonds, binwidth=.01) +
scale_x_log10() +
ggtitle('Price (log10)')
library(gridExtra)
plot1 <- qplot(x=price, data=diamonds, binwidth=1) +
ggtitle('Price')
plot2 <- qplot(x=price, data=diamonds, binwidth=.01) +
scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=1)
ggplot(aes(carat, price), data=diamonds) +
scale_y_continuous(trans=log10_trans()) +
ggtitle("Price (log10) by carat")
qplot(carat, price, data=diamonds) +
scale_y_continuous(trans=log10_trans()) +
ggtitle("Price (log10) by carat")
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
View(diamond_samp)
head(sort(table(diamonds$carat), decreasing=T))
head(sort(table(diamonds$price), decreasing=T))
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha=.3, size=.75, position="jitter") +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# install and load the RColorBrewer package
# install.packages('RColorBrewer')
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color=clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = Cut, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and color')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = Color, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = "Color", reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = "Color",
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and color')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
mtable(m1, m2, m3, m4, m5)
load("diamondsbig.csv")
diamondsBigSample <- read.csv("diamondsbig.csv")
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsBigSample)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
View(diamondsByClarity)
View(diamondsBigSample)
diamondsBigSample <- read.csv("diamondsbig.csv")
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = subset(diamondsBigSample, price < 10000 & cert == "GIA"))
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
#Be sure you’ve loaded the library memisc and have m5 saved as an object in your workspace.
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
exp(modelEstimate)
#Be sure you’ve loaded the library memisc and have m5 saved as an object in your workspace.
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
exp(modelEstimate)
dat = data.frame(m4$model, m4$residuals)
with(dat, sd(m4.residuals))
with(subset(dat, carat > .9 & carat < 1.1), sd(m4.residuals))
dat$resid <- as.numeric(dat$m4.residuals)
ggplot(aes(y = resid, x = round(carat, 2)), data = dat) +
geom_line(stat = "summary", fun.y = sd)
